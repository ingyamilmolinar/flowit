flowit:
  version: "0.1"
  config:
    abort-on-failed-action: true
    strict: true
    shell: /usr/bin/env bash
  variables:
    circleci-username: ${CIRCLECI_USERNAME}
    circleci-project-name: ${CIRCLECI_PROJECT_NAME}
    circleci-token: ${CIRCLECI_TOKEN}
  branches:
  - id: master
    name: master
    eternal: true
    protected: true

  - id: develop
    name: develop
    eternal: true
    protected: true

  - id: feature
    name: $<prefix>$<suffix>
    prefix: feature/$<jira-issue-id>/
    suffix: $<feature-branch-suffix>
    eternal: false
    protected: false
    transitions:
    - from: develop
      to: [ develop:remote ]

  - id: bugfix
    name: $<prefix>$<suffix>
    prefix: bugfix/$<jira-issue-id>/
    suffix: $<bugfix-branch-suffix>
    eternal: false
    protected: false
    transitions:
    - from: develop
      to: [ develop:local ]
    - from: release
      to: [ release:remote ]

  - id: hotfix
    name: $<prefix>$<suffix>
    prefix: hotfix/$<jira-issue-id>/
    suffix: $<hotfix-branch-suffix>
    eternal: false
    protected: false
    transitions:
    - from: master
      to: [ develop:local, master:remote ]

  - id: release
    name: $<prefix>$<suffix>
    prefix: release/$<jira-issue-id>/
    suffix: $<release-branch-suffix>
    eternal: false
    protected: true
    transitions:
    - from: develop
      to: [ develop:remote, master:local ]

  tags:
  - id: release
    format: v[0-9]+\.[0-9]+\.[0-9]+
    stages:
      release: [ finish, sync ]
      hotfix: [ finish ]
    branches: [ master ]

  - id: dev
    format: dev
    branches: [ develop ]

  - id: stage
    format: stage
    branches: [ release ]

  state-machines:
    - id: simple-machine
      stages: [ start, fetch, sync, publish, finish ]
      initial-stage: start
      final-stages: [ finish ]
      transitions:
      - from: [ "!finish" ]
        to: [ "!start" ]

    - id: simple-machine-no-fetch
      stages: [ start, sync, publish, finish ]
      initial-stage: start
      final-stages: [ finish ]
      transitions:
      - from: [ "!finish" ]
        to: [ "!start" ]

  workflows:
  - id: feature
    state-machine: simple-machine
    stages:
    - id: start
      args:
      - < feature-branch-suffix | Branch name without prefix >
      - < jira-issue-id | Related Jira Issue ID >
      conditions:
      - "echo [[ $(jira list --status $<jira-issue-id>) == *'Open'* ]]"
      actions:
      - echo git checkout develop
      - echo git pull origin develop
      - git checkout -b $<branches[feature].name> develop
      - jira transition $<jira-issue-id> 'In progress'

    - id: fetch
      args:
      - <full-branch-name | Remote full branch name>
      actions:
      - git fetch 
      - git checkout $<full-branch-name>
      - git pull origin $<full-branch-name>

    - id: sync
      actions:
      - echo git checkout develop
      - echo git pull origin develop
      - git checkout $<branches[feature].name>
      - echo git rebase develop

    - id: publish
      conditions:
      - ./run-tests.sh
      - "[[ $(jira list --status $<jira-issue-id>) == *'In Progress'* ]]"
      actions:
      - git checkout $<branches[feature].name>
      - git push origin $<branches[feature].name>
      - jira transition $<jira-issue-id> 'In code review'

    - id: finish
      conditions:
      - "[[ $(curl https://circleci.com/api/v1.1/project/github/$<circleci-username>/$<circleci-project-name>?circle-token=$<circleci-token>) == *'Passed'* ]]"
      - "[[ $(hub pr list --base $<branches[feature].name>) == *'Merged'* ]]"
      actions:
      - jira transition $<jira-issue-id> 'Done'
      - git checkout develop
      - git pull origin develop
      - git branch -D $<branches[feature].name>
      - git push --delete origin $<branches[feature].name>


  - id: bugfix
    state-machine: simple-machine
    stages:
    - id: start
      args:
      - < bugfix-branch-suffix | Branch name without prefix >
      - < jira-issue-id | Related Jira Issue ID >
      conditions:
      - "[[ $(jira list --status $<jira-issue-id>) == *'Open'* ]]"
      actions:
      - git checkout develop
      - git pull origin develop
      - git checkout -b $<branches[bugfix].name> develop
      - jira transition $<jira-issue-id> 'In progress'

    - id: fetch
      args:
      - <full-branch-name | Remote full branch name>
      actions:
      - git fetch 
      - git checkout $<full-branch-name>
      - git pull origin $<full-branch-name>

    - id: sync
      actions:
      - git checkout develop
      - git pull origin develop
      - git checkout $<branches[bugfix].name>
      - git rebase develop

    - id: publish
      conditions:
      - ./run-tests.sh
      - "[[ $(jira list --status $<jira-issue-id>) == *'In Progress'* ]]"
      actions:
      - git checkout $<branches[bugfix].name>
      - git push origin $<branches[bugfix].name>
      - jira transition $<jira-issue-id> 'In code review'

    - id: finish
      conditions:
      - "[[ $(curl https://circleci.com/api/v1.1/project/github/$<circleci-username>/$<circleci-project-name>?circle-token=$<circleci-token>) == *'Passed'* ]]"
      - "[[ $(hub pr list --base $<branches[bugfix].name>) == *'Merged'* ]]"
      actions:
      - jira transition $<jira-issue-id> 'Done'
      - git checkout develop
      - git pull origin develop
      - git branch -D $<branches[bugfix].name>
      - git push --delete origin $<branches[bugfix].name>


  - id: release
    state-machine: simple-machine-no-fetch
    stages:
    - id: start
      args:
      - < release-branch-suffix | Branch name without prefix >
      - < jira-issue-id | Related Jira Issue ID >
      - < release-tag-version | Release tag version >
      conditions:
      - "[[ $(jira list --status $<jira-issue-id>) == *'Open'* ]]"
      actions:
      - git checkout develop
      - git pull origin develop
      - git checkout -b $<branches[release].name> develop
      - jira transition $<jira-issue-id> 'In progress'

    - id: sync
      actions:
      - git checkout develop
      - git pull origin develop
      - git checkout $<branches[release].name>
      - git rebase develop

    - id: publish
      conditions:
      - ./run-tests.sh
      - "[[ $(jira list --status $<jira-issue-id>) == *'In Progress'* ]]"
      actions:
      - git checkout $<branches[release].name>
      - git push origin $<branches[release].name>
      - jira transition $<jira-issue-id> 'In code review'

    - id: finish
      conditions:
      - "[[ $(curl https://circleci.com/api/v1.1/project/github/$<circleci-username>/$<circleci-project-name>?circle-token=$<circleci-token>) == *'Passed'* ]]"
      - "[[ $(hub pr list --base develop --head $<branches[release].name>) == *'Merged'* ]]"
      actions:
      - git checkout master
      - git pull origin master
      - git merge --no-ff $<branches[release].name>
      - git tag $<release-tag-version>
      - git push --no-verify origin master
      - git push --no-verify origin $<release-tag-version>
      - jira transition $<jira-issue-id> 'Done'
      - git checkout develop
      - git pull origin develop
      - git branch -D $<branches[release].name>
      - git push --delete origin $<branches[release].name>
  
  - id: hotfix
    state-machine: simple-machine-no-fetch
    stages:
    - id: start
      args:
      - < hotfix-branch-suffix | Branch name without prefix >
      - < jira-issue-id | Related Jira Issue ID >
      - < hotfix-tag-version | Hotfix tag version >
      conditions:
      - "[[ $(jira list --status $<jira-issue-id>) == *'Open'* ]]"
      actions:
      - git checkout master
      - git pull origin master
      - git checkout -b $<branches[hotfix].name> master
      - jira transition $<jira-issue-id> 'In progress'

    - id: sync
      actions:
      - git checkout master
      - git pull origin master
      - git checkout $<branches[hotfix].name>
      - git rebase master

    - id: publish
      conditions:
      - ./run-tests.sh
      - "[[ $(jira list --status $<jira-issue-id>) == *'In Progress'* ]]"
      actions:
      - git checkout $<branches[hotfix].name>
      - git push origin $<branches[hotfix].name>
      - jira transition $<jira-issue-id> 'In code review'

    - id: finish
      conditions:
      - "[[ $(curl https://circleci.com/api/v1.1/project/github/$<circleci-username>/$<circleci-project-name>?circle-token=$<circleci-token>) == *'Passed'* ]]"
      - "[[ $(hub pr list --base master --head $<branches[hotfix].name>) == *'Merged'* ]]"
      actions:
      - git checkout develop
      - git pull origin develop
      - git merge --no-ff $<branches[hotfix].name>
      - git tag $<hotfix-tag-version>
      - git push --no-verify origin develop
      - git push --no-verify origin $<hotfix-tag-version>
      - jira transition $<jira-issue-id> 'Done'
      - git checkout master
      - git pull origin master
      - git branch -D $<branches[hotfix].name>
      - git push --delete origin $<branches[hotfix].name>
