flowit:
  version: "0.1"
  config:
    abort-on-failed-action: true # On this case, we need to track every action so we can resume an interrupted stage
    strict: false # Strict mode will prevent creating other types of workflow elements. This will make git unusable for mutation of refs
    shell: /usr/bin/env bash
  variables:
    circleci-username: ${CIRCLECI_USERNAME}
    circleci-project-name: ${CIRCLECI_PROJECT_NAME}
    circleci-token: ${CIRCLECI_TOKEN}
  workflow:
    branches:
    - id: master
      name: master
      # TODO: There's no pre-checkout hook so we need to think of an alternative. Aliasing / overriding git checkout?
      eternal: true # You cannot delete it or create it. We will create this branch at setup if it does not exist.
      protected: true # You cannot commit directly to it

    - id: feature
      name: $<prefix>$<suffix>
      prefix: feature/$<jira-issue-id>/
      suffix: $<feature-branch-suffix>
      eternal: false # You must create it and can delete it
      protected: false # You can commit directly to it
      transitions:
        # We can throw an error when a feature branch is created from a branch /= master
      - from: master
        # We can throw an error when a branch is merged to a branch /= master
        to: master
        # We can throw an error when a branch is merged locally
        local: false

    # This means that we cannot create tags on another branch that is not master
    # And they should have a valid format
    tags:
    - id: release
      format: "[0-9]+\\.[0-9]+"
      branches: 
      - master

    stages:
    - feature:
      - start: < feature-branch-suffix | Branch name without prefix >
               < jira-issue-id | Related Jira Issue ID >
        conditions:
        - "[[ $(jira list --status $<jira-issue-id>) == *'Open'* ]]"
        actions:
        - git checkout master
        - git pull origin master
        - git checkout -b $<workflow.branches[feature].name> master
        - jira transition $<jira-issue-id> 'In progress'

      - refresh:
        actions:
        - git checkout master
        - git pull origin master
        - git checkout $<workflow.branches[feature].name>
        - git rebase master

      - publish:
        conditions:
        - ./run-tests.sh
        - "[[ $(jira list --status $<jira-issue-id>) == *'In Progress'* ]]"
        actions:
        - git checkout $<workflow.branches[feature].name>
        - git push origin $<workflow.branches[feature].name>
        - jira transition $<jira-issue-id> 'In code review'

      - finish:
        conditions:
        - "[[ $(curl https://circleci.com/api/v1.1/project/github/$<circleci-username>/$<circleci-project-name>?circle-token=$<circleci-token>) == *'Passed'* ]]"
        - "[[ $(hub pr list --base develop --head $<workflow.branches[feature].name>) == *'Merged'* ]]"
        actions:
        - jira transition $<jira-issue-id> 'Done'
        - git checkout master
        - git pull origin master
        - git branch -D $<workflow.branches[feature].name>
        - git push --delete origin $<workflow.branches[feature].name>
